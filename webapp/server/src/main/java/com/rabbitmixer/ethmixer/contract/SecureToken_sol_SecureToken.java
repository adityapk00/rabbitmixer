package com.rabbitmixer.ethmixer.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint128;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class SecureToken_sol_SecureToken extends Contract {
    private static final String BINARY = "6060604052600160008190556002908190557f277a420332215ead37ba61fee84f0d23276a6799e5da57c1354dc37d12a7c2dc90557f2f15018e84feee6d1b7b60fa04ec75927bdc78aae85f41a79242f7a4bd2c4a9b60035560048054600160a060020a033316600160a060020a03199182168117909255600580549091169091179055678ac7230489e8000034101561009857600080fd5b34600655612b2a806100ab6000396000f30060606040526004361061015e5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301660f5d811461016357806306d0ec20146101c2578063122c1fd0146101db578063122d6f821461020b578063124cdbea146102df5780632026a54d1461030457806325f685cc1461031a57806327e235e3146103485780632ad58d751461039e57806332b5f8a6146103b457806345b4c2c9146103cd578063573ab0fd146104085780635981a75b146104625780635a58cd4c1461047e5780637190e1421461049157806385d005f4146105655780638f49be041461057b5780639492b50b146105915780639ee2dec9146105a5578063ae51d644146105bb578063c16fd435146105d7578063d0e30db0146105f3578063d5786163146105fb578063d932ebe814610611578063d98fd85a1461062a578063de76b4e514610640578063e206b0bf14610653575b600080fd5b341561016e57600080fd5b6101c0600480359060248035916044359160849060643590810190830135806020818102016040519081016040528093929190818152602001838360200280828437509496506106a295505050505050565b005b34156101cd57600080fd5b6101c060043560243561087f565b34156101e657600080fd5b6101f76004356024356044356109ad565b604051901515815260200160405180910390f35b341561021657600080fd5b6101c0600480359060446024803590810190830135806020818102016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843750949650610a2695505050505050565b34156102ea57600080fd5b6102f2610e9a565b60405190815260200160405180910390f35b341561030f57600080fd5b6101c0600435610ea0565b341561032557600080fd5b610330600435610f0c565b60405191825260208201526040908101905180910390f35b341561035357600080fd5b610367600160a060020a0360043516610f2b565b6040519283526fffffffffffffffffffffffffffffffff909116602083015215156040808301919091526060909101905180910390f35b34156103a957600080fd5b6101c0600435610f6f565b34156103bf57600080fd5b6101c0600435602435610fab565b34156103d857600080fd5b6101c0600160a060020a036004351660243560443560643560843560a43560ff60c4351660e43561010435611001565b341561041357600080fd5b6101c0600480359060248035919060649060443590810190830135806020818102016040519081016040528093929190818152602001838360200280828437509496506112e095505050505050565b341561046d57600080fd5b6101f7600435602435604435611351565b341561048957600080fd5b6101c0611488565b341561049c57600080fd5b6101c06004803590604460248035908101908301358060208181020160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437509496506114af95505050505050565b341561057057600080fd5b6101c060043561171f565b341561058657600080fd5b6102f260043561178e565b6101c0600160a060020a03600435166117aa565b34156105b057600080fd5b6101c0600435611874565b34156105c657600080fd5b6101c06004356024356044356118c4565b34156105e257600080fd5b6101c06004356024356044356118fc565b6101c0611937565b341561060657600080fd5b6101f7600435611a59565b341561061c57600080fd5b6101f7600435602435611c5a565b341561063557600080fd5b6101c0600435611db3565b341561064b57600080fd5b6102f2611dca565b341561065e57600080fd5b6101f76004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650611dd095505050505050565b60006106ac612992565b6106b4612992565b60055433600160a060020a039081169116146106cf57600080fd5b600285106106dc57600080fd5b600a86106106e957600080fd5b60a487600a81106106f657fe5b600402015460011461070757600080fd5b683635c9adc5dea000008460018151811061071e57fe5b906020019060200201511061073257600080fd5b841515610794578360028151811061074657fe5b9060200190602002015160a488600a811061075d57fe5b600402016002018781548110151561077157fe5b90600052602060002090600302016001015414151561078f57600080fd5b61084b565b60a487600a81106107a157fe5b60040201600201868154811015156107b557fe5b906000526020600020906003020192506107d283600101546124b5565b91506020820151600080516020612adf833981519152036020808401919091528354600160a060020a031660009081526007909152604090205461081f90610819906124b5565b836125a1565b90508360028151811061082e57fe5b9060200190602002015161084182612603565b1461084b57600080fd5b83600960148902600289020187016064811061086357fe5b019080516108759291602001906129b8565b5050505050505050565b60006109076109026108c2836002604080519081016040529190828260026020028201915b8154815260200190600101908083116108a457505050505085612640565b6108fd600280604080519081016040529190828260026020028201915b8154815260200190600101908083116108df57505050505087612640565b6125a1565b612603565b600160a060020a033316600090815260076020526040902054909150811461092e57600080fd5b600083111561097257600160a060020a03331683156108fc0284604051600060405180830381858888f19350505050151561096857600080fd5b6008805484900390555b505050600160a060020a0333166000908152600760205260408120908155600101805470ffffffffffffffffffffffffffffffffff19169055565b6000610a1e60096014860260028602018401606481106109c957fe5b01805480602002602001604051908101604052809291908181526020018280548015610a1457602002820191906000526020600020905b815481526020019060010190808311610a00575b5050505050611dd0565b949350505050565b6000610a30612a03565b610a38612992565b610a40612992565b610a48612a03565b60055433600160a060020a03908116911614610a6357600080fd5b60a489600a8110610a7057fe5b6004020154600314610a8157600080fd5b60a489600a8110610a8e57fe5b6004020160020180549050885114610aa557600080fd5b8551875114610ab357600080fd5b600094505b60a489600a8110610ac557fe5b6004020160020180549050851015610caf5760a489600a8110610ae457fe5b6004020160020185815481101515610af857fe5b9060005260206000209060030201606060405190810160409081528254600160a060020a03168252600183015460208301908152600290930154908201529450610b4290516124b5565b92506020830151600080516020612adf833981519152036020840152610b8f610b89600760008751600160a060020a031681526020810191909152604001600020546124b5565b846125a1565b9150610b9a82612603565b600760008651600160a060020a0316815260208101919091526040016000908120919091556007908551600160a060020a03168152602081019190915260400160009081206001908101546fffffffffffffffffffffffffffffffff1601906007908651600160a060020a03168152602081019190915260400160002060010180546fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff929092169190911790557f4b969a19ce0cd9ad8425f59e59cc6fc2b32b95df7ea80eeafe2b94d37fae83388451898781518110610c7957fe5b90602001906020020151604051600160a060020a03909216825260208201526040908101905180910390a1600190940193610ab8565b600094505b60a489600a8110610cc157fe5b6004020160030180549050851015610e725760a489600a8110610ce057fe5b6004020160030185815481101515610cf457fe5b9060005260206000209060030201606060405190810160409081528254600160a060020a03168252600183015460208301908152600290930154908201529150511515610d87578051600160a060020a03166108fc82604001519081150290604051600060405180830381858888f193505050501515610d7357600080fd5b806040015160088054919091039055610e67565b610dc2610902610db5600760008551600160a060020a031681526020810191909152604001600020546124b5565b6108fd84602001516124b5565b600760008351600160a060020a031681526020810191909152604001600020557f7d8e0b4f343a0b182b974c58f4cbd912cf589c16219269bd9c831874ec630b618151888781518110610e1157fe5b90602001906020020151888881518110610e2757fe5b906020019060200201516040518084600160a060020a0316600160a060020a03168152602001838152602001828152602001935050505060405180910390a15b600190940193610cb4565b600460a48a600a8110610e8157fe5b6004020155610e8f8961267b565b505050505050505050565b60065481565b60055433600160a060020a03908116911614610ebb57600080fd5b60a481600a8110610ec857fe5b600402015415610ed757600080fd5b600160a482600a8110610ee657fe5b600402015562015180420160a482600a8110610efe57fe5b600402016001018190555050565b60a481600a8110610f1957fe5b60040201805460019091015490915082565b600760205260009081526040902080546001909101546fffffffffffffffffffffffffffffffff811690700100000000000000000000000000000000900460ff1683565b4260a482600a8110610f7d57fe5b60040201600101541115610fa857600560a482600a8110610f9a57fe5b6004020155610fa88161171f565b50565b600060a483600a8110610fba57fe5b600402015490506002811480610fd05750806003145b1515610fdb57600080fd5b610fe58383611c5a565b1515610ffc57610ff48361267b565b610ffc612784565b505050565b611009612992565b60055433600160a060020a0390811691161461102457600080fd5b60a489600a811061103157fe5b600402015460011461104257600080fd5b600160a060020a038a16600090815260076020526040902060010154700100000000000000000000000000000000900460ff161561107f57600080fd5b600160a060020a038a166000908152600760205260409020600101546fffffffffffffffffffffffffffffffff1686146110b857600080fd5b89600160a060020a031660018b888b8b8a604051600160a060020a03959095166c01000000000000000000000000028552601485019390935260348401919091526054830152607482015260940160405180910390206040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0160405180910390208686866040516000815260200160405260405193845260ff9092166020808501919091526040808501929092526060840192909252608090920191516020810390808403906000865af1151561119c57600080fd5b505060206040510351600160a060020a0316146111b857600080fd5b600660a48a600a81106111c757fe5b60040201600201805490501015156111de57600080fd5b8781526020810187905260a489600a81106111f557fe5b60040201600201805480600101828161120e9190612a23565b916000526020600020906003020160006060604051908101604052808e600160a060020a0316815260200161124286612603565b81526020018990529190508151815473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0391909116178155602082015181600101556040820151600290910155505050600160a060020a039098166000908152600760205260409020600101805470ff0000000000000000000000000000000019167001000000000000000000000000000000001790555050505050505050565b60055433600160a060020a039081169116146112fb57600080fd5b600b821061130857600080fd5b60a483600a811061131557fe5b600402015460011461132657600080fd5b80606d600b850284016037811061133957fe5b0190805161134b9291602001906129b8565b50505050565b60008061135c612992565b6000808060a489600a811061136d57fe5b600402016002018881548110151561138157fe5b90600052602060002090600302019450600092505b60a489600a81106113a357fe5b60040201600301805490508310156114775760a489600a81106113c257fe5b60040201600301838154811015156113d657fe5b9060005260206000209060030201915081600201546000141561146c5761140082600101546124b5565b8554909450600160a060020a03168451602086015189604051600160a060020a03949094166c01000000000000000000000000028452601484019290925260348301526054820152607401604051908190039020600286015490915081141561146c576001955061147c565b600190920191611396565b600095505b50505050509392505050565b60045433600160a060020a039081169116146114a357600080fd5b33600160a060020a0316ff5b600554600090819033600160a060020a039081169116146114cf57600080fd5b60a486600a81106114dc57fe5b60040201546001146114ed57600080fd5b600060a487600a81106114fc57fe5b600402016002018054905011151561151357600080fd5b601485511061152157600080fd5b600183518551010385511461153557600080fd5b600091505b83518210156116185760a486600a811061155057fe5b6004020160030180548060010182816115699190612a23565b9160005260206000209060030201600060606040519081016040528089878151811061159157fe5b90602001906020020151600160a060020a031681526020018887815181106115b557fe5b90602001906020020151815260006020909101529190508151815473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0391909116178155602082015181600101556040820151600290910155505060019091019061153a565b83519050600191505b82518210156117035760a486600a811061163757fe5b6004020160030180548060010182816116509190612a23565b91600052602060002090600302016000606060405190810160405280896001880387018151811061167d57fe5b90602001906020020151600160a060020a03168152602001600081526020018787815181106116a857fe5b9060200190602002015190529190508151815473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03919091161781556020820151816001015560408201516002909101555050600190910190611621565b600260a487600a811061171257fe5b6004020155505050505050565b60055460009033600160a060020a0390811691161461173d57600080fd5b60a482600a811061174a57fe5b6004020154905060018114806117605750806002145b8061176b5750806003145b806117765750806005145b151561178157600080fd5b61178a8261267b565b5050565b600060a482600a811061179d57fe5b600402015490505b919050565b60045433600160a060020a039081169116146117c557600080fd5b600654156117d257600080fd5b600554600160a060020a0316156117e857600080fd5b678ac7230489e800003410156117fd57600080fd5b6000600654111561184157600554600654600160a060020a039091169080156108fc0290604051600060405180830381858888f19350505050151561184157600080fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905534600655565b600060a482600a811061188357fe5b6004020154905060028114806118995750806003145b15156118a457600080fd5b6118ad82611a59565b151561178a576118bc8261267b565b61178a612784565b600060a484600a81106118d357fe5b600402015490506118e58484846109ad565b151561134b576118f48461267b565b61134b612784565b600060a484600a811061190b57fe5b6004020154905060028114806119215750806003145b151561192c57600080fd5b6118e5848484611351565b61193f612992565b611947612992565b6000341161195457600080fd5b61198f600280604080519081016040529190828260026020028201915b81548152602001906001019080831161197157505050505034612640565b600160a060020a033316600090815260076020526040902054909250156119e157600160a060020a0333166000908152600760205260409020546119d2906124b5565b90506119de81836125a1565b91505b6119ea82612603565b33600160a060020a038116600090815260076020526040908190209290925560088054349081019091557f2e55d2fcf999c81d4ca841cea5d6faee76bffeb8708c24d46d6c6cc3411645b89251600160a060020a03909216825260208201526040908101905180910390a15050565b6000611a63612992565b6000611a6d612992565b600060a486600a8110611a7c57fe5b6004020160020180549050111515611a9357600080fd5b611acf60a486600a8110611aa357fe5b600402016002016000815481101515611ab857fe5b9060005260206000209060030201600101546124b5565b9250600191505b60a485600a8110611ae357fe5b6004020160020180549050821015611b2a57611b1d836108fd60a488600a8110611b0957fe5b6004020160020185815481101515611ab857fe5b9250600190910190611ad6565b600091505b60a485600a8110611b3c57fe5b6004020160030180549050821015611c395760a485600a8110611b5b57fe5b6004020160030182815481101515611b6f57fe5b90600052602060002090600302016001015460001415611c0357611bfc816108fd600280604080519081016040529190828260026020028201915b815481526020019060010190808311611baa57505050505060a489600a81101515611bd157fe5b6004020160030186815481101515611be557fe5b906000526020600020906003020160020154612640565b9050611c2e565b611c2b816108fd60a488600a8110611c1757fe5b6004020160030185815481101515611ab857fe5b90505b600190910190611b2f565b80518351148015611c51575060208101516020840151145b95945050505050565b6000806000611c67612992565b600060a487600a8110611c7657fe5b6004020160030186815481101515611c8a57fe5b90600052602060002090600302016001015460001415611cad5760019450611da9565b606d600b8802870160378110611cbf57fe5b019350836002815481101515611cd157fe5b9060005260206000209001549250611d40611ceb846124b5565b6108fd600280604080519081016040529190828260026020028201915b815481526020019060010190808311611d08575050505050876001815481101515611d2f57fe5b906000526020600020900154612640565b9150611d4b82612603565b60a488600a8110611d5857fe5b6004020160030187815481101515611d6c57fe5b906000526020600020906003020160010154149050801515611d915760009450611da9565b611da6606d600b89028801603781106109c957fe5b94505b5050505092915050565b600360a482600a8110611dc257fe5b600402015550565b60085481565b6000806000611ddd612992565b611de5612992565b611ded612a4f565b611df5612a4f565b611dfd612a4f565b600889511015611e0c57600080fd5b600560038a5103811515611e1c57fe5b0615611e2757600080fd5b600560038a5103811515611e3757fe5b04965086600202600201604051805910611e4e5750595b90808252806020026020018201604052509250611e8089600281518110611e7157fe5b906020019060200201516124b5565b93508351158015611e9357506020840151155b15611ea157600097506124a9565b83516020850151848960020281518110611eb757fe5b906020019060200201858a60020260010181518110611ed257fe5b6020908102909101019190915252600095505b60018703861015611f9657611f02898760030181518110611e7157fe5b94508451158015611f1557506020850151155b15611f2357600097506124a9565b84516020860151848860020281518110611f3957fe5b906020019060200201858960020260010181518110611f5457fe5b60209081029091010191909152528460016020020151600080516020612adf833981519152036020860152611f8984866125a1565b6001909601959350611ee5565b600089600181518110611fa557fe5b90602001906020020151111561202f57612006600280604080519081016040529190828260026020028201915b815481526020019060010190808311611fd25750505050508a600181518110611ff757fe5b90602001906020020151612640565b94506020850151600080516020612adf83398151915203602086015261202c85856125a1565b93505b835160208501518460028a600202038151811061204857fe5b9060200190602002018560018b600202038151811061206357fe5b6020908102909101019190915252600687026040518059106120825750595b90808252806020026020018201604052509150866002026040518059106120a65750595b90808252806020026020018201604052509050600095505b8686101561246a5761211f600280604080519081016040529190828260026020028201915b8154815260200190600101908083116120e35750505050508a60008151811061210857fe5b90602001906020020151600a0a8860040a02612640565b94506020850151600080516020612adf83398151915203602086015282600287028151811061214a57fe5b9060200190602002015183876002026001018151811061216657fe5b906020019060200201516020860152845261218185856125a1565b93508351602085015183886006028151811061219957fe5b9060200190602002018489600602600101815181106121b457fe5b60209081029091010191909152526121cc85856125a1565b9350835160208501518388600602600201815181106121e757fe5b90602001906020020184896006026003018151811061220257fe5b602090810290910101919091525261221a85856125a1565b93508351602085015183886006026004018151811061223557fe5b90602001906020020184896006026005018151811061225057fe5b60209081029091010191909152526122e489600289018151811061227057fe5b906020019060200201516040805190810160405280868a6002028151811061229457fe5b906020019060200201518152602001868a600202600101815181106122b557fe5b9060200190602002015190528b600360048b028c0101815181106122d557fe5b906020019060200201516127dd565b855261234585516040805190810160405280858a6006028151811061230557fe5b906020019060200201518152602001858a6006026001018151811061232657fe5b9060200190602002015190528b6004808b028c0101815181106122d557fe5b85526123aa85516040805190810160405280858a6006026002018151811061236957fe5b906020019060200201518152602001858a6006026003018151811061238a57fe5b9060200190602002015190528b600560048b028c0101815181106122d557fe5b855261241e85516040805190810160405280858a600602600401815181106123ce57fe5b906020019060200201518152602001858a600602600501815181106123ef57fe5b9060200190602002015190528b600660048b028c01018151811061240f57fe5b906020019060200201516127f2565b94508451602086015182886002028151811061243657fe5b90602001906020020183896002026001018151811061245157fe5b60209081029091010191909152526001909501946120be565b6040516040880281528051822086525088876002018151811061248957fe5b90602001906020020151855114156124a457600197506124a9565b600097505b50505050505050919050565b6124bd612992565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821681526000806124ef8351612856565b9250905081151561250d5760008084528360015b602002015261259a565b7f800000000000000000000000000000000000000000000000000000000000000084161561256c57806001166001141561254d5760208301819052612567565b600080516020612adf833981519152819003836001612503565b61259a565b806001166001141561259257600080516020612adf833981519152819003836001612503565b602083018190525b5050919050565b6125a9612992565b60405183518152602084015160208201528251604082015260208301516060820152604081608083600060066107d05a03f18080156125e7576125ec565b608083fd5b508151835260208201516020840152505092915050565b6000815190506020820151600116600114156117a5577f800000000000000000000000000000000000000000000000000000000000000017919050565b612648612992565b6040518351815260208401516020820152826040820152604081606083600060076107d05a03f18080156125e7576125ec565b60005b60a482600a811061268b57fe5b600402016002018054905081101561272c57600060078160a485600a81106126af57fe5b60040201600201848154811015156126c357fe5b60009182526020808320600390920290910154600160a060020a031683528201929092526040019020600190810180549215157001000000000000000000000000000000000270ff0000000000000000000000000000000019909316929092179091550161267e565b60a482600a811061273957fe5b60040201600201600061274c9190612a61565b60a482600a811061275957fe5b60040201600301600061276c9190612a61565b600060a483600a811061277b57fe5b60040201555050565b33600160a060020a03166108fc6006549081150290604051600060405180830381858888f1935050505015156127b957600080fd5b60006006556005805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000610a1e6127ed8585856127f2565b612940565b6127fa612992565b612802612992565b61280c8486612640565b905061284a60006002604080519081016040529190828260026020028201915b81548152602001906001019080831161282c57505050505084612640565b9150611c5181836125a1565b600080808080600080516020612adf8339815191528687099250600080516020612adf8339815191528684099250600080516020612adf833981519152600384089250600080516020612adf83398151915291507f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f52905060405160208152602080820152602060408201528360608201528160808201528260a082015260208160c083600060056107d05a03f180801561290f57612914565b60c083fd5b5081519650600080516020612adf83398151915291506129319050565b85860983149350505050915091565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018251602084015160405191825260208201526040908101905190819003902081151561298b57fe5b0692915050565b604080519081016040526002815b60008152602001906001900390816129a05790505090565b8280548282559060005260206000209081019282156129f3579160200282015b828111156129f35782518255916020019190600101906129d8565b506129ff929150612a82565b5090565b606060405190810160409081526000808352602083018190529082015290565b815481835581811511610ffc57600302816003028360005260206000209182019101610ffc9190612a9f565b60206040519081016040526000815290565b5080546000825560030290600052602060002090810190610fa89190612a9f565b612a9c91905b808211156129ff5760008155600101612a88565b90565b612a9c91905b808211156129ff57805473ffffffffffffffffffffffffffffffffffffffff191681556000600182018190556002820155600301612aa5560030644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a165627a7a723058209fcd736a12acdc2fd9a19003ce20bb8c627f3ddcfbf539ea9156951d26340d300029";

    protected SecureToken_sol_SecureToken(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SecureToken_sol_SecureToken(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<BRMDepositTokenCompleteEventEventResponse> getBRMDepositTokenCompleteEventEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("BRMDepositTokenCompleteEvent", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<BRMDepositTokenCompleteEventEventResponse> responses = new ArrayList<BRMDepositTokenCompleteEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BRMDepositTokenCompleteEventEventResponse typedResponse = new BRMDepositTokenCompleteEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<BRMDepositTokenCompleteEventEventResponse> bRMDepositTokenCompleteEventEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("BRMDepositTokenCompleteEvent", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, BRMDepositTokenCompleteEventEventResponse>() {
            @Override
            public BRMDepositTokenCompleteEventEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                BRMDepositTokenCompleteEventEventResponse typedResponse = new BRMDepositTokenCompleteEventEventResponse();
                typedResponse.log = log;
                typedResponse.addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<BRMRecieverTransactionCompleteEventEventResponse> getBRMRecieverTransactionCompleteEventEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("BRMRecieverTransactionCompleteEvent", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<BRMRecieverTransactionCompleteEventEventResponse> responses = new ArrayList<BRMRecieverTransactionCompleteEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BRMRecieverTransactionCompleteEventEventResponse typedResponse = new BRMRecieverTransactionCompleteEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.eph_pub = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<BRMRecieverTransactionCompleteEventEventResponse> bRMRecieverTransactionCompleteEventEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("BRMRecieverTransactionCompleteEvent", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, BRMRecieverTransactionCompleteEventEventResponse>() {
            @Override
            public BRMRecieverTransactionCompleteEventEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                BRMRecieverTransactionCompleteEventEventResponse typedResponse = new BRMRecieverTransactionCompleteEventEventResponse();
                typedResponse.log = log;
                typedResponse.addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.eph_pub = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<BRMSenderTransactionCompleteEventEventResponse> getBRMSenderTransactionCompleteEventEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("BRMSenderTransactionCompleteEvent", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<BRMSenderTransactionCompleteEventEventResponse> responses = new ArrayList<BRMSenderTransactionCompleteEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BRMSenderTransactionCompleteEventEventResponse typedResponse = new BRMSenderTransactionCompleteEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.new_balance_enc = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<BRMSenderTransactionCompleteEventEventResponse> bRMSenderTransactionCompleteEventEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("BRMSenderTransactionCompleteEvent", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, BRMSenderTransactionCompleteEventEventResponse>() {
            @Override
            public BRMSenderTransactionCompleteEventEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                BRMSenderTransactionCompleteEventEventResponse typedResponse = new BRMSenderTransactionCompleteEventEventResponse();
                typedResponse.log = log;
                typedResponse.addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.new_balance_enc = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<TransactionReceipt> transaction_publish_sender_range_proof(BigInteger mix_number, BigInteger sender_number, BigInteger range_proof_number, List<BigInteger> proof) {
        final Function function = new Function(
                "transaction_publish_sender_range_proof", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(mix_number), 
                new org.web3j.abi.datatypes.generated.Uint256(sender_number), 
                new org.web3j.abi.datatypes.generated.Uint256(range_proof_number), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(proof, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> withdraw_all(BigInteger balance, BigInteger blinding) {
        final Function function = new Function(
                "withdraw_all", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(balance), 
                new org.web3j.abi.datatypes.generated.Uint256(blinding)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> verify_sender_proof(BigInteger mix_number, BigInteger sender_number, BigInteger proof_number) {
        final Function function = new Function("verify_sender_proof", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(mix_number), 
                new org.web3j.abi.datatypes.generated.Uint256(sender_number), 
                new org.web3j.abi.datatypes.generated.Uint256(proof_number)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> transaction_execute(BigInteger mix_number, List<BigInteger> sender_datas, List<BigInteger> reciever_amounts, List<BigInteger> reciever_pubs) {
        final Function function = new Function(
                "transaction_execute", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(mix_number), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(sender_datas, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(reciever_amounts, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(reciever_pubs, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> bounty_amount() {
        final Function function = new Function("bounty_amount", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transaction_start_preparing(BigInteger mix_number) {
        final Function function = new Function(
                "transaction_start_preparing", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(mix_number)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> mix_details(BigInteger param0) {
        final Function function = new Function("mix_details", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<Tuple3<BigInteger, BigInteger, Boolean>> balances(String param0) {
        final Function function = new Function("balances", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint128>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple3<BigInteger, BigInteger, Boolean>>(
                new Callable<Tuple3<BigInteger, BigInteger, Boolean>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, Boolean>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (Boolean) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> challenge_transaction_expiry(BigInteger mix_number) {
        final Function function = new Function(
                "challenge_transaction_expiry", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(mix_number)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> challenge_reciever_proof(BigInteger mix_number, BigInteger reciever_number) {
        final Function function = new Function(
                "challenge_reciever_proof", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(mix_number), 
                new org.web3j.abi.datatypes.generated.Uint256(reciever_number)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transaction_publish_sender_proof(String from_addr, BigInteger mix_number, BigInteger total_amount_commitment_x, BigInteger total_amount_commitment_y, BigInteger nonce, byte[] reciever_hash, BigInteger v, byte[] r, byte[] s) {
        final Function function = new Function(
                "transaction_publish_sender_proof", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from_addr), 
                new org.web3j.abi.datatypes.generated.Uint256(mix_number), 
                new org.web3j.abi.datatypes.generated.Uint256(total_amount_commitment_x), 
                new org.web3j.abi.datatypes.generated.Uint256(total_amount_commitment_y), 
                new org.web3j.abi.datatypes.generated.Uint256(nonce), 
                new org.web3j.abi.datatypes.generated.Bytes32(reciever_hash), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transaction_publish_reciever_range_proof(BigInteger mix_number, BigInteger receiver_number, List<BigInteger> proof) {
        final Function function = new Function(
                "transaction_publish_reciever_range_proof", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(mix_number), 
                new org.web3j.abi.datatypes.generated.Uint256(receiver_number), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(proof, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> verify_senders_reciever(BigInteger mix_number, BigInteger sender_number, BigInteger randomness) {
        final Function function = new Function("verify_senders_reciever", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(mix_number), 
                new org.web3j.abi.datatypes.generated.Uint256(sender_number), 
                new org.web3j.abi.datatypes.generated.Uint256(randomness)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> deleteContract() {
        final Function function = new Function(
                "deleteContract", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transaction_publish_reciever_proof(BigInteger mix_number, List<String> recievers, List<BigInteger> reciever_amount_commitments, List<BigInteger> reciever_transparent_amounts) {
        final Function function = new Function(
                "transaction_publish_reciever_proof", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(mix_number), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.Utils.typeMap(recievers, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(reciever_amount_commitments, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(reciever_transparent_amounts, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> mix_cancel(BigInteger mix_number) {
        final Function function = new Function(
                "mix_cancel", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(mix_number)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> transaction_get_status(BigInteger mix_number) {
        final Function function = new Function("transaction_get_status", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(mix_number)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> bounty_reset(String addr, BigInteger weiValue) {
        final Function function = new Function(
                "bounty_reset", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> challenge_mix_amounts(BigInteger mix_number) {
        final Function function = new Function(
                "challenge_mix_amounts", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(mix_number)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> challenge_sender_proof(BigInteger mix_number, BigInteger sender_number, BigInteger proof_number) {
        final Function function = new Function(
                "challenge_sender_proof", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(mix_number), 
                new org.web3j.abi.datatypes.generated.Uint256(sender_number), 
                new org.web3j.abi.datatypes.generated.Uint256(proof_number)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> challenge_senders_reciever(BigInteger mix_number, BigInteger sender_number, BigInteger randomness) {
        final Function function = new Function(
                "challenge_senders_reciever", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(mix_number), 
                new org.web3j.abi.datatypes.generated.Uint256(sender_number), 
                new org.web3j.abi.datatypes.generated.Uint256(randomness)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> deposit(BigInteger weiValue) {
        final Function function = new Function(
                "deposit", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<Boolean> verify_mix_amounts(BigInteger mix_number) {
        final Function function = new Function("verify_mix_amounts", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(mix_number)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> verify_reciever_proof(BigInteger mix_number, BigInteger reciever_number) {
        final Function function = new Function("verify_reciever_proof", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(mix_number), 
                new org.web3j.abi.datatypes.generated.Uint256(reciever_number)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> transaction_verify(BigInteger mix_number) {
        final Function function = new Function(
                "transaction_verify", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(mix_number)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> total_token_supply() {
        final Function function = new Function("total_token_supply", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> CTVerifyTx(List<BigInteger> ip) {
        final Function function = new Function("CTVerifyTx", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(ip, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public static RemoteCall<SecureToken_sol_SecureToken> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployRemoteCall(SecureToken_sol_SecureToken.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static RemoteCall<SecureToken_sol_SecureToken> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployRemoteCall(SecureToken_sol_SecureToken.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static SecureToken_sol_SecureToken load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SecureToken_sol_SecureToken(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static SecureToken_sol_SecureToken load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SecureToken_sol_SecureToken(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class BRMDepositTokenCompleteEventEventResponse {
        public Log log;

        public String addr;

        public BigInteger amount;
    }

    public static class BRMRecieverTransactionCompleteEventEventResponse {
        public Log log;

        public String addr;

        public BigInteger amount;

        public BigInteger eph_pub;
    }

    public static class BRMSenderTransactionCompleteEventEventResponse {
        public Log log;

        public String addr;

        public BigInteger new_balance_enc;
    }
}
